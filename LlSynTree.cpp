// This file was automatically generated by EbnfStudio; don't modify it!
#include "LlSynTree.h"
using namespace Ll;

SynTree::SynTree(quint16 r, const Token& t ):d_tok(r){
	d_tok.d_lineNr = t.d_lineNr;
	d_tok.d_colNr = t.d_colNr;
	d_tok.d_sourcePath = t.d_sourcePath;
}

const char* SynTree::rToStr( quint16 r ) {
	switch(r) {
		case R_ConstDeclaration: return "ConstDeclaration";
		case R_Lola2: return "Lola2";
		case R_ModuleType: return "ModuleType";
		case R_SimpleType: return "SimpleType";
		case R_StatementSequence: return "StatementSequence";
		case R_TSgate: return "TSgate";
		case R_TypeDeclaration: return "TypeDeclaration";
		case R_VarRegDeclaration: return "VarRegDeclaration";
		case R_assignment: return "assignment";
		case R_assignment_or_instantiation: return "assignment_or_instantiation";
		case R_comment: return "comment";
		case R_constructor: return "constructor";
		case R_control: return "control";
		case R_designator: return "designator";
		case R_element: return "element";
		case R_expression: return "expression";
		case R_factor: return "factor";
		case R_input: return "input";
		case R_instantiation: return "instantiation";
		case R_iogate: return "iogate";
		case R_module: return "module";
		case R_output: return "output";
		case R_paramlist: return "paramlist";
		case R_selector: return "selector";
		case R_simpleExpr: return "simpleExpr";
		case R_statement: return "statement";
		case R_term: return "term";
		case R_type: return "type";
		case R_uncondExpr: return "uncondExpr";
		case R_unit: return "unit";
		case R_variable: return "variable";
		case R_varlist: return "varlist";
	default: if(r<R_First) return tokenTypeName(r); else return "";
}
}
