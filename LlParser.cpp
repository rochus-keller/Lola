

// This file was automatically generated by Coco/R; don't modify it.
#include "LlParser.h"
#include "LlErrors.h"
#include <QtDebug>
#include <QFileInfo>

namespace Ll {


static QString coco_string_create( const wchar_t* str )
{
    return QString::fromStdWString(str);
}

int Parser::peek( quint8 la )
{
	if( la == 0 )
		return d_cur.d_type;
	else if( la == 1 )
		return d_next.d_type;
	else
		return scanner->peekToken( la - 1 ).d_type;
}


void Parser::SynErr(int n, const char* ctx) {
    if (errDist >= minErrDist)
    {
       SynErr(d_next.d_sourcePath,d_next.d_lineNr, d_next.d_colNr, n, errors, ctx);
    }
	errDist = 0;
}

void Parser::SemErr(const char* msg) {
	if (errDist >= minErrDist) errors->error(Ll::Errors::Semantics,d_cur.d_sourcePath,d_cur.d_lineNr, d_cur.d_colNr, msg);
	errDist = 0;
}

void Parser::Get() {
	for (;;) {
		d_cur = d_next;
		d_next = scanner->nextToken();
        bool deliverToParser = false;
        switch( d_next.d_type )
        {
        case Ll::Tok_Invalid:
        	if( !d_next.d_val.isEmpty() )
            	SynErr( d_next.d_type, d_next.d_val );
            // else errors already handeled in lexer
            break;
        case Ll::Tok_Comment:
            // ignorieren
            break;
        default:
            deliverToParser = true;
            break;
        }

        if( deliverToParser )
        {
            if( d_next.d_type == Ll::Tok_Eof )
                d_next.d_type = _EOF;

            la->kind = d_next.d_type;
            if (la->kind <= maxT)
            {
                ++errDist;
                break;
            }
        }

		d_next = d_cur;
	}
}

void Parser::Expect(int n, const char* ctx ) {
	if (la->kind==n) Get(); else { SynErr(n, ctx); }
}

void Parser::ExpectWeak(int n, int follow) {
	if (la->kind == n) Get();
	else {
		SynErr(n);
		while (!StartOf(follow)) Get();
	}
}

bool Parser::WeakSeparator(int n, int syFol, int repFol) {
	if (la->kind == n) {Get(); return true;}
	else if (StartOf(repFol)) {return false;}
	else {
		SynErr(n);
		while (!(StartOf(syFol) || StartOf(repFol) || StartOf(0))) {
			Get();
		}
		return StartOf(syFol);
	}
}

void Parser::Lola2() {
		d_stack.push(&d_root); 
		while (la->kind == _T_MODULE) {
			module();
		}
		d_stack.pop(); 
}

void Parser::module() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_module, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_MODULE,__FUNCTION__);
		addTerminal(); 
		Expect(_T_identifier,__FUNCTION__);
		addTerminal(); 
		unit();
		Expect(_T_identifier,__FUNCTION__);
		addTerminal(); 
		Expect(_T_Dot,__FUNCTION__);
		addTerminal(); 
		d_stack.pop(); 
}

void Parser::type() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_type, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		while (la->kind == _T_Lbrack) {
			Get();
			addTerminal(); 
			expression();
			Expect(_T_Rbrack,__FUNCTION__);
			addTerminal(); 
		}
		SimpleType();
		d_stack.pop(); 
}

void Parser::expression() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_expression, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		uncondExpr();
		if (la->kind == _T_MinusGt) {
			Get();
			addTerminal(); 
			expression();
			Expect(_T_Colon,__FUNCTION__);
			addTerminal(); 
			expression();
		}
		d_stack.pop(); 
}

void Parser::SimpleType() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_SimpleType, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (StartOf(1)) {
			if (la->kind == _T_BIT) {
				Get();
				addTerminal(); 
			} else if (la->kind == _T_BYTE) {
				Get();
				addTerminal(); 
			} else if (la->kind == _T_WORD) {
				Get();
				addTerminal(); 
			} else {
				Get();
				addTerminal(); 
			}
		} else if (la->kind == _T_MODULE) {
			ModuleType();
		} else SynErr(52,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::ModuleType() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_ModuleType, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_MODULE,__FUNCTION__);
		addTerminal(); 
		if (la->kind == _T_Star) {
			Get();
			addTerminal(); 
		}
		unit();
		Expect(_T_Semi,__FUNCTION__);
		addTerminal(); 
		d_stack.pop(); 
}

void Parser::TypeDeclaration() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_TypeDeclaration, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_identifier,__FUNCTION__);
		addTerminal(); 
		if (la->kind == _T_Eq) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_ColonEq) {
			Get();
			addTerminal(); 
		} else SynErr(53,__FUNCTION__);
		type();
		d_stack.pop(); 
}

void Parser::ConstDeclaration() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_ConstDeclaration, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_identifier,__FUNCTION__);
		addTerminal(); 
		if (la->kind == _T_Eq) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_ColonEq) {
			Get();
			addTerminal(); 
		} else SynErr(54,__FUNCTION__);
		Expect(_T_integer,__FUNCTION__);
		addTerminal(); 
		Expect(_T_Semi,__FUNCTION__);
		addTerminal(); 
		d_stack.pop(); 
}

void Parser::varlist() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_varlist, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_identifier,__FUNCTION__);
		addTerminal(); 
		while (la->kind == _T_Comma) {
			Get();
			addTerminal(); 
			Expect(_T_identifier,__FUNCTION__);
			addTerminal(); 
		}
		Expect(_T_Colon,__FUNCTION__);
		addTerminal(); 
		type();
		d_stack.pop(); 
}

void Parser::uncondExpr() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_uncondExpr, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		simpleExpr();
		if (StartOf(2)) {
			switch (la->kind) {
			case _T_Eq: {
				Get();
				addTerminal(); 
				break;
			}
			case _T_Hash: {
				Get();
				addTerminal(); 
				break;
			}
			case _T_Lt: {
				Get();
				addTerminal(); 
				break;
			}
			case _T_Leq: {
				Get();
				addTerminal(); 
				break;
			}
			case _T_Gt: {
				Get();
				addTerminal(); 
				break;
			}
			case _T_Geq: {
				Get();
				addTerminal(); 
				break;
			}
			}
			simpleExpr();
		}
		d_stack.pop(); 
}

void Parser::simpleExpr() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_simpleExpr, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_Plus || la->kind == _T_Minus) {
			if (la->kind == _T_Plus) {
				Get();
				addTerminal(); 
			} else {
				Get();
				addTerminal(); 
			}
		}
		term();
		while (StartOf(3)) {
			if (la->kind == _T_Bar) {
				Get();
				addTerminal(); 
			} else if (la->kind == _T_Hat) {
				Get();
				addTerminal(); 
			} else if (la->kind == _T_Plus) {
				Get();
				addTerminal(); 
			} else {
				Get();
				addTerminal(); 
			}
			term();
		}
		d_stack.pop(); 
}

void Parser::term() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_term, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		factor();
		while (la->kind == _T_Amp) {
			Get();
			addTerminal(); 
			factor();
		}
		d_stack.pop(); 
}

void Parser::factor() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_factor, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_identifier) {
			variable();
		} else if (la->kind == _T_integer) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_Tilde) {
			Get();
			addTerminal(); 
			factor();
		} else if (la->kind == _T_Lbrace) {
			constructor();
		} else if (la->kind == _T_Lpar) {
			Get();
			addTerminal(); 
			expression();
			Expect(_T_Rpar,__FUNCTION__);
			addTerminal(); 
		} else SynErr(55,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::variable() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_variable, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		designator();
		d_stack.pop(); 
}

void Parser::constructor() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_constructor, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_Lbrace,__FUNCTION__);
		addTerminal(); 
		element();
		while (la->kind == _T_Comma) {
			Get();
			addTerminal(); 
			element();
		}
		Expect(_T_Rbrace,__FUNCTION__);
		addTerminal(); 
		d_stack.pop(); 
}

void Parser::designator() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_designator, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_identifier,__FUNCTION__);
		addTerminal(); 
		while (la->kind == _T_Dot || la->kind == _T_Lbrack) {
			selector();
		}
		d_stack.pop(); 
}

void Parser::selector() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_selector, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_Dot) {
			Get();
			addTerminal(); 
			factor();
		} else if (la->kind == _T_Lbrack) {
			Get();
			addTerminal(); 
			expression();
			if (la->kind == _T_Colon) {
				Get();
				addTerminal(); 
				expression();
			}
			Expect(_T_Rbrack,__FUNCTION__);
			addTerminal(); 
		} else SynErr(56,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::element() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_element, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		expression();
		if (la->kind == _T_Bang) {
			Get();
			addTerminal(); 
			Expect(_T_integer,__FUNCTION__);
			addTerminal(); 
		}
		d_stack.pop(); 
}

void Parser::assignment_or_instantiation() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_assignment_or_instantiation, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		designator();
		if (la->kind == _T_ColonEq) {
			Get();
			addTerminal(); 
			expression();
		} else if (la->kind == _T_Lpar) {
			Get();
			addTerminal(); 
			expression();
			while (la->kind == _T_Comma) {
				Get();
				addTerminal(); 
				expression();
			}
			Expect(_T_Rpar,__FUNCTION__);
			addTerminal(); 
		} else SynErr(57,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::statement() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_statement, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_TS || la->kind == _T_identifier) {
			if (la->kind == _T_identifier) {
				assignment_or_instantiation();
			} else {
				TSgate();
			}
		}
		d_stack.pop(); 
}

void Parser::TSgate() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_TSgate, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_TS,__FUNCTION__);
		addTerminal(); 
		Expect(_T_Lpar,__FUNCTION__);
		addTerminal(); 
		iogate();
		Expect(_T_Comma,__FUNCTION__);
		addTerminal(); 
		input();
		Expect(_T_Comma,__FUNCTION__);
		addTerminal(); 
		output();
		Expect(_T_Comma,__FUNCTION__);
		addTerminal(); 
		control();
		Expect(_T_Rpar,__FUNCTION__);
		addTerminal(); 
		d_stack.pop(); 
}

void Parser::StatementSequence() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_StatementSequence, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		statement();
		while (la->kind == _T_Semi) {
			Get();
			addTerminal(); 
			statement();
		}
		d_stack.pop(); 
}

void Parser::iogate() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_iogate, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		variable();
		d_stack.pop(); 
}

void Parser::input() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_input, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		variable();
		d_stack.pop(); 
}

void Parser::output() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_output, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		expression();
		d_stack.pop(); 
}

void Parser::control() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_control, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		expression();
		d_stack.pop(); 
}

void Parser::unit() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_unit, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		Expect(_T_Lpar,__FUNCTION__);
		addTerminal(); 
		paramlist();
		while (la->kind == _T_Semi) {
			Get();
			addTerminal(); 
			paramlist();
		}
		Expect(_T_Rpar,__FUNCTION__);
		addTerminal(); 
		if (la->kind == _T_Hat) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_Semi) {
			Get();
			addTerminal(); 
			if (la->kind == _T_CONST) {
				Get();
				addTerminal(); 
				while (la->kind == _T_identifier) {
					ConstDeclaration();
				}
			}
			if (la->kind == _T_TYPE) {
				Get();
				addTerminal(); 
				while (la->kind == _T_identifier) {
					TypeDeclaration();
				}
			}
			while (la->kind == _T_REG || la->kind == _T_VAR) {
				VarRegDeclaration();
			}
			if (la->kind == _T_BEGIN) {
				Get();
				addTerminal(); 
				StatementSequence();
			}
			Expect(_T_END,__FUNCTION__);
			addTerminal(); 
		} else SynErr(58,__FUNCTION__);
		d_stack.pop(); 
}

void Parser::paramlist() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_paramlist, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_IN || la->kind == _T_INOUT || la->kind == _T_OUT) {
			if (la->kind == _T_IN) {
				Get();
				addTerminal(); 
			} else if (la->kind == _T_OUT) {
				Get();
				addTerminal(); 
			} else {
				Get();
				addTerminal(); 
			}
		}
		varlist();
		d_stack.pop(); 
}

void Parser::VarRegDeclaration() {
		Ll::SynTree* n = new Ll::SynTree( Ll::SynTree::R_VarRegDeclaration, d_next ); d_stack.top()->d_children.append(n); d_stack.push(n); 
		if (la->kind == _T_VAR) {
			Get();
			addTerminal(); 
		} else if (la->kind == _T_REG) {
			Get();
			addTerminal(); 
			Expect(_T_Lpar,__FUNCTION__);
			addTerminal(); 
			expression();
			Expect(_T_Rpar,__FUNCTION__);
			addTerminal(); 
		} else SynErr(59,__FUNCTION__);
		while (la->kind == _T_identifier) {
			varlist();
			Expect(_T_Semi,__FUNCTION__);
			addTerminal(); 
		}
		d_stack.pop(); 
}




// If the user declared a method Init and a mehtod Destroy they should
// be called in the contructur and the destructor respctively.
//
// The following templates are used to recognize if the user declared
// the methods Init and Destroy.

template<typename T>
struct ParserInitExistsRecognizer {
	template<typename U, void (U::*)() = &U::Init>
	struct ExistsIfInitIsDefinedMarker{};

	struct InitIsMissingType {
		char dummy1;
	};
	
	struct InitExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static InitIsMissingType is_here(...);

	// exist only if ExistsIfInitIsDefinedMarker is defined
	template<typename U>
	static InitExistsType is_here(ExistsIfInitIsDefinedMarker<U>*);

	enum { InitExists = (sizeof(is_here<T>(NULL)) == sizeof(InitExistsType)) };
};

template<typename T>
struct ParserDestroyExistsRecognizer {
	template<typename U, void (U::*)() = &U::Destroy>
	struct ExistsIfDestroyIsDefinedMarker{};

	struct DestroyIsMissingType {
		char dummy1;
	};
	
	struct DestroyExistsType {
		char dummy1; char dummy2;
	};

	// exists always
	template<typename U>
	static DestroyIsMissingType is_here(...);

	// exist only if ExistsIfDestroyIsDefinedMarker is defined
	template<typename U>
	static DestroyExistsType is_here(ExistsIfDestroyIsDefinedMarker<U>*);

	enum { DestroyExists = (sizeof(is_here<T>(NULL)) == sizeof(DestroyExistsType)) };
};

// The folloing templates are used to call the Init and Destroy methods if they exist.

// Generic case of the ParserInitCaller, gets used if the Init method is missing
template<typename T, bool = ParserInitExistsRecognizer<T>::InitExists>
struct ParserInitCaller {
	static void CallInit(T *t) {
		// nothing to do
	}
};

// True case of the ParserInitCaller, gets used if the Init method exists
template<typename T>
struct ParserInitCaller<T, true> {
	static void CallInit(T *t) {
		t->Init();
	}
};

// Generic case of the ParserDestroyCaller, gets used if the Destroy method is missing
template<typename T, bool = ParserDestroyExistsRecognizer<T>::DestroyExists>
struct ParserDestroyCaller {
	static void CallDestroy(T *t) {
		// nothing to do
	}
};

// True case of the ParserDestroyCaller, gets used if the Destroy method exists
template<typename T>
struct ParserDestroyCaller<T, true> {
	static void CallDestroy(T *t) {
		t->Destroy();
	}
};

void Parser::Parse() {
	d_cur = Ll::Token();
	d_next = Ll::Token();
	Get();
	Lola2();
	Expect(0,__FUNCTION__);
}

Parser::Parser(Ll::Lexer *scanner, Ll::Errors* err) {
	maxT = 51;

	ParserInitCaller<Parser>::CallInit(this);
	la = &d_dummy;
	minErrDist = 2;
	errDist = minErrDist;
	this->scanner = scanner;
	errors = err;
}

bool Parser::StartOf(int s) {
	const bool T = true;
	const bool x = false;

	static bool set[4][53] = {
		{T,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, T,T,x,x, x,x,x,x, x,x,x,x, T,x,T,x, x,x,x,x, x},
		{x,x,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,T,T, T,T,T,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x},
		{x,x,x,x, x,x,x,x, x,x,T,x, T,x,x,x, x,x,x,x, x,x,x,x, x,T,x,T, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x,x,x,x, x}
	};



	return set[s][la->kind];
}

Parser::~Parser() {
	ParserDestroyCaller<Parser>::CallDestroy(this);
}

void Parser::SynErr(const QString& sourcePath, int line, int col, int n, Ll::Errors* err, const char* ctx, const QString& str ) {
	QString s;
	QString ctxStr;
	if( ctx )
		ctxStr = QString( " in %1" ).arg(ctx);
    if( n == 0 )
        s = QString("EOF expected%1").arg(ctxStr);
    else if( n < Ll::TT_Specials )
        s = QString("'%2' expected%1").arg(ctxStr).arg(Ll::tokenTypeString(n));
    else if( n <= Ll::TT_Max )
        s = QString("%2 expected%1").arg(ctxStr).arg(Ll::tokenTypeString(n));
    else
	switch (n) {
			case 0: s = coco_string_create(L"EOF expected"); break;
			case 1: s = coco_string_create(L"T_Literals_ expected"); break;
			case 2: s = coco_string_create(L"T_Bang expected"); break;
			case 3: s = coco_string_create(L"T_Hash expected"); break;
			case 4: s = coco_string_create(L"T_Amp expected"); break;
			case 5: s = coco_string_create(L"T_Lpar expected"); break;
			case 6: s = coco_string_create(L"T_Latt expected"); break;
			case 7: s = coco_string_create(L"T_Rpar expected"); break;
			case 8: s = coco_string_create(L"T_Star expected"); break;
			case 9: s = coco_string_create(L"T_Ratt expected"); break;
			case 10: s = coco_string_create(L"T_Plus expected"); break;
			case 11: s = coco_string_create(L"T_Comma expected"); break;
			case 12: s = coco_string_create(L"T_Minus expected"); break;
			case 13: s = coco_string_create(L"T_MinusGt expected"); break;
			case 14: s = coco_string_create(L"T_Dot expected"); break;
			case 15: s = coco_string_create(L"T_Colon expected"); break;
			case 16: s = coco_string_create(L"T_ColonEq expected"); break;
			case 17: s = coco_string_create(L"T_Semi expected"); break;
			case 18: s = coco_string_create(L"T_Lt expected"); break;
			case 19: s = coco_string_create(L"T_Leq expected"); break;
			case 20: s = coco_string_create(L"T_Eq expected"); break;
			case 21: s = coco_string_create(L"T_Gt expected"); break;
			case 22: s = coco_string_create(L"T_Geq expected"); break;
			case 23: s = coco_string_create(L"T_Lbrack expected"); break;
			case 24: s = coco_string_create(L"T_Rbrack expected"); break;
			case 25: s = coco_string_create(L"T_Hat expected"); break;
			case 26: s = coco_string_create(L"T_Lbrace expected"); break;
			case 27: s = coco_string_create(L"T_Bar expected"); break;
			case 28: s = coco_string_create(L"T_Rbrace expected"); break;
			case 29: s = coco_string_create(L"T_Tilde expected"); break;
			case 30: s = coco_string_create(L"T_Keywords_ expected"); break;
			case 31: s = coco_string_create(L"T_BEGIN expected"); break;
			case 32: s = coco_string_create(L"T_BIT expected"); break;
			case 33: s = coco_string_create(L"T_BYTE expected"); break;
			case 34: s = coco_string_create(L"T_CONST expected"); break;
			case 35: s = coco_string_create(L"T_END expected"); break;
			case 36: s = coco_string_create(L"T_IN expected"); break;
			case 37: s = coco_string_create(L"T_INOUT expected"); break;
			case 38: s = coco_string_create(L"T_MODULE expected"); break;
			case 39: s = coco_string_create(L"T_OUT expected"); break;
			case 40: s = coco_string_create(L"T_REG expected"); break;
			case 41: s = coco_string_create(L"T_TS expected"); break;
			case 42: s = coco_string_create(L"T_TYPE expected"); break;
			case 43: s = coco_string_create(L"T_VAR expected"); break;
			case 44: s = coco_string_create(L"T_WORD expected"); break;
			case 45: s = coco_string_create(L"T_Specials_ expected"); break;
			case 46: s = coco_string_create(L"T_identifier expected"); break;
			case 47: s = coco_string_create(L"T_integer expected"); break;
			case 48: s = coco_string_create(L"T_Comment expected"); break;
			case 49: s = coco_string_create(L"T_Eof expected"); break;
			case 50: s = coco_string_create(L"T_MaxToken_ expected"); break;
			case 51: s = coco_string_create(L"??? expected"); break;
			case 52: s = coco_string_create(L"invalid SimpleType"); break;
			case 53: s = coco_string_create(L"invalid TypeDeclaration"); break;
			case 54: s = coco_string_create(L"invalid ConstDeclaration"); break;
			case 55: s = coco_string_create(L"invalid factor"); break;
			case 56: s = coco_string_create(L"invalid selector"); break;
			case 57: s = coco_string_create(L"invalid assignment_or_instantiation"); break;
			case 58: s = coco_string_create(L"invalid unit"); break;
			case 59: s = coco_string_create(L"invalid VarRegDeclaration"); break;

		default:
		{
			s = QString( "generic error %1").arg(n);
		}
		break;
	}
    if( !str.isEmpty() )
        s = QString("%1 %2").arg(s).arg(str);
	if( err )
		err->error(Ll::Errors::Syntax, sourcePath, line, col, s);
	else
		qCritical() << "Error Parser" << line << col << s;
	//count++;
}

} // namespace

