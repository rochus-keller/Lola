// This file was automatically generated by EbnfStudio; don't modify it!
#include "LlTokenType.h"

namespace Ll {
	const char* tokenTypeString( int r ) {
		switch(r) {
			case Tok_Invalid: return "<invalid>";
			case Tok_Bang: return "!";
			case Tok_Hash: return "#";
			case Tok_Amp: return "&";
			case Tok_Lpar: return "(";
			case Tok_Latt: return "(*";
			case Tok_Rpar: return ")";
			case Tok_Star: return "*";
			case Tok_Ratt: return "*)";
			case Tok_Plus: return "+";
			case Tok_Comma: return ",";
			case Tok_Minus: return "-";
			case Tok_MinusGt: return "->";
			case Tok_Dot: return ".";
			case Tok_Colon: return ":";
			case Tok_ColonEq: return ":=";
			case Tok_Semi: return ";";
			case Tok_Lt: return "<";
			case Tok_Leq: return "<=";
			case Tok_Eq: return "=";
			case Tok_Gt: return ">";
			case Tok_Geq: return ">=";
			case Tok_Lbrack: return "[";
			case Tok_Rbrack: return "]";
			case Tok_Hat: return "^";
			case Tok_Lbrace: return "{";
			case Tok_Bar: return "|";
			case Tok_Rbrace: return "}";
			case Tok_Tilde: return "~";
			case Tok_BEGIN: return "BEGIN";
			case Tok_BIT: return "BIT";
			case Tok_BYTE: return "BYTE";
			case Tok_CONST: return "CONST";
			case Tok_END: return "END";
			case Tok_IN: return "IN";
			case Tok_INOUT: return "INOUT";
			case Tok_MODULE: return "MODULE";
			case Tok_OUT: return "OUT";
			case Tok_REG: return "REG";
			case Tok_TS: return "TS";
			case Tok_TYPE: return "TYPE";
			case Tok_VAR: return "VAR";
			case Tok_WORD: return "WORD";
			case Tok_identifier: return "identifier";
			case Tok_integer: return "integer";
			case Tok_Comment: return "Comment";
			case Tok_Eof: return "<eof>";
			default: return "";
		}
	}
	const char* tokenTypeName( int r ) {
		switch(r) {
			case Tok_Invalid: return "Tok_Invalid";
			case Tok_Bang: return "Tok_Bang";
			case Tok_Hash: return "Tok_Hash";
			case Tok_Amp: return "Tok_Amp";
			case Tok_Lpar: return "Tok_Lpar";
			case Tok_Latt: return "Tok_Latt";
			case Tok_Rpar: return "Tok_Rpar";
			case Tok_Star: return "Tok_Star";
			case Tok_Ratt: return "Tok_Ratt";
			case Tok_Plus: return "Tok_Plus";
			case Tok_Comma: return "Tok_Comma";
			case Tok_Minus: return "Tok_Minus";
			case Tok_MinusGt: return "Tok_MinusGt";
			case Tok_Dot: return "Tok_Dot";
			case Tok_Colon: return "Tok_Colon";
			case Tok_ColonEq: return "Tok_ColonEq";
			case Tok_Semi: return "Tok_Semi";
			case Tok_Lt: return "Tok_Lt";
			case Tok_Leq: return "Tok_Leq";
			case Tok_Eq: return "Tok_Eq";
			case Tok_Gt: return "Tok_Gt";
			case Tok_Geq: return "Tok_Geq";
			case Tok_Lbrack: return "Tok_Lbrack";
			case Tok_Rbrack: return "Tok_Rbrack";
			case Tok_Hat: return "Tok_Hat";
			case Tok_Lbrace: return "Tok_Lbrace";
			case Tok_Bar: return "Tok_Bar";
			case Tok_Rbrace: return "Tok_Rbrace";
			case Tok_Tilde: return "Tok_Tilde";
			case Tok_BEGIN: return "Tok_BEGIN";
			case Tok_BIT: return "Tok_BIT";
			case Tok_BYTE: return "Tok_BYTE";
			case Tok_CONST: return "Tok_CONST";
			case Tok_END: return "Tok_END";
			case Tok_IN: return "Tok_IN";
			case Tok_INOUT: return "Tok_INOUT";
			case Tok_MODULE: return "Tok_MODULE";
			case Tok_OUT: return "Tok_OUT";
			case Tok_REG: return "Tok_REG";
			case Tok_TS: return "Tok_TS";
			case Tok_TYPE: return "Tok_TYPE";
			case Tok_VAR: return "Tok_VAR";
			case Tok_WORD: return "Tok_WORD";
			case Tok_identifier: return "Tok_identifier";
			case Tok_integer: return "Tok_integer";
			case Tok_Comment: return "Tok_Comment";
			case Tok_Eof: return "Tok_Eof";
			default: return "";
		}
	}
	bool tokenTypeIsLiteral( int r ) {
		return r > TT_Literals && r < TT_Keywords;
	}
	bool tokenTypeIsKeyword( int r ) {
		return r > TT_Keywords && r < TT_Specials;
	}
	bool tokenTypeIsSpecial( int r ) {
		return r > TT_Specials && r < TT_Max;
	}
	static inline char at( const QByteArray& str, int i ){
		return ( i >= 0 && i < str.size() ? str[i] : 0 );
	}
	TokenType tokenTypeFromString( const QByteArray& str, int* pos ) {
		int i = ( pos != 0 ? *pos: 0 );
		TokenType res = Tok_Invalid;
		switch( at(str,i) ){
		case '!':
			res = Tok_Bang; i += 1;
			break;
		case '#':
			res = Tok_Hash; i += 1;
			break;
		case '&':
			res = Tok_Amp; i += 1;
			break;
		case '(':
			if( at(str,i+1) == '*' ){
				res = Tok_Latt; i += 2;
			} else {
				res = Tok_Lpar; i += 1;
			}
			break;
		case ')':
			res = Tok_Rpar; i += 1;
			break;
		case '*':
			if( at(str,i+1) == ')' ){
				res = Tok_Ratt; i += 2;
			} else {
				res = Tok_Star; i += 1;
			}
			break;
		case '+':
			res = Tok_Plus; i += 1;
			break;
		case ',':
			res = Tok_Comma; i += 1;
			break;
		case '-':
			if( at(str,i+1) == '>' ){
				res = Tok_MinusGt; i += 2;
			} else {
				res = Tok_Minus; i += 1;
			}
			break;
		case '.':
			res = Tok_Dot; i += 1;
			break;
		case ':':
			if( at(str,i+1) == '=' ){
				res = Tok_ColonEq; i += 2;
			} else {
				res = Tok_Colon; i += 1;
			}
			break;
		case ';':
			res = Tok_Semi; i += 1;
			break;
		case '<':
			if( at(str,i+1) == '=' ){
				res = Tok_Leq; i += 2;
			} else {
				res = Tok_Lt; i += 1;
			}
			break;
		case '=':
			res = Tok_Eq; i += 1;
			break;
		case '>':
			if( at(str,i+1) == '=' ){
				res = Tok_Geq; i += 2;
			} else {
				res = Tok_Gt; i += 1;
			}
			break;
		case 'B':
			switch( at(str,i+1) ){
			case 'E':
				if( at(str,i+2) == 'G' ){
					if( at(str,i+3) == 'I' ){
						if( at(str,i+4) == 'N' ){
							res = Tok_BEGIN; i += 5;
						}
					}
				}
				break;
			case 'I':
				if( at(str,i+2) == 'T' ){
					res = Tok_BIT; i += 3;
				}
				break;
			case 'Y':
				if( at(str,i+2) == 'T' ){
					if( at(str,i+3) == 'E' ){
						res = Tok_BYTE; i += 4;
					}
				}
				break;
			}
			break;
		case 'C':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'N' ){
					if( at(str,i+3) == 'S' ){
						if( at(str,i+4) == 'T' ){
							res = Tok_CONST; i += 5;
						}
					}
				}
			}
			break;
		case 'E':
			if( at(str,i+1) == 'N' ){
				if( at(str,i+2) == 'D' ){
					res = Tok_END; i += 3;
				}
			}
			break;
		case 'I':
			if( at(str,i+1) == 'N' ){
				if( at(str,i+2) == 'O' ){
					if( at(str,i+3) == 'U' ){
						if( at(str,i+4) == 'T' ){
							res = Tok_INOUT; i += 5;
						}
					}
				} else {
					res = Tok_IN; i += 2;
				}
			}
			break;
		case 'M':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'D' ){
					if( at(str,i+3) == 'U' ){
						if( at(str,i+4) == 'L' ){
							if( at(str,i+5) == 'E' ){
								res = Tok_MODULE; i += 6;
							}
						}
					}
				}
			}
			break;
		case 'O':
			if( at(str,i+1) == 'U' ){
				if( at(str,i+2) == 'T' ){
					res = Tok_OUT; i += 3;
				}
			}
			break;
		case 'R':
			if( at(str,i+1) == 'E' ){
				if( at(str,i+2) == 'G' ){
					res = Tok_REG; i += 3;
				}
			}
			break;
		case 'T':
			switch( at(str,i+1) ){
			case 'S':
				res = Tok_TS; i += 2;
				break;
			case 'Y':
				if( at(str,i+2) == 'P' ){
					if( at(str,i+3) == 'E' ){
						res = Tok_TYPE; i += 4;
					}
				}
				break;
			}
			break;
		case 'V':
			if( at(str,i+1) == 'A' ){
				if( at(str,i+2) == 'R' ){
					res = Tok_VAR; i += 3;
				}
			}
			break;
		case 'W':
			if( at(str,i+1) == 'O' ){
				if( at(str,i+2) == 'R' ){
					if( at(str,i+3) == 'D' ){
						res = Tok_WORD; i += 4;
					}
				}
			}
			break;
		case '[':
			res = Tok_Lbrack; i += 1;
			break;
		case ']':
			res = Tok_Rbrack; i += 1;
			break;
		case '^':
			res = Tok_Hat; i += 1;
			break;
		case '{':
			res = Tok_Lbrace; i += 1;
			break;
		case '|':
			res = Tok_Bar; i += 1;
			break;
		case '}':
			res = Tok_Rbrace; i += 1;
			break;
		case '~':
			res = Tok_Tilde; i += 1;
			break;
		}
		if(pos) *pos = i;
		return res;
	}
}
